// Mocks generated by Mockito 5.4.4 from annotations
// in biluca_financas/test/accountability/bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:biluca_financas/accountability/models/entry.dart' as _i3;
import 'package:biluca_financas/accountability/models/entry_request.dart'
    as _i8;
import 'package:biluca_financas/accountability/models/identification.dart'
    as _i4;
import 'package:biluca_financas/sqlite/sqlite_accountability_repo.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:sqflite_common_ffi/sqflite_ffi.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAccountabilityEntry_1 extends _i1.SmartFake
    implements _i3.AccountabilityEntry {
  _FakeAccountabilityEntry_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAccountabilityIdentification_2 extends _i1.SmartFake
    implements _i4.AccountabilityIdentification {
  _FakeAccountabilityIdentification_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SQLiteAccountabilityRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockSQLiteAccountabilityRepo extends _i1.Mock
    implements _i5.SQLiteAccountabilityRepo {
  @override
  _i2.Database get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeDatabase_0(
          this,
          Invocation.getter(#db),
        ),
        returnValueForMissingStub: _FakeDatabase_0(
          this,
          Invocation.getter(#db),
        ),
      ) as _i2.Database);

  @override
  String get tableName => (super.noSuchMethod(
        Invocation.getter(#tableName),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#tableName),
        ),
      ) as String);

  @override
  set tableName(String? _tableName) => super.noSuchMethod(
        Invocation.setter(
          #tableName,
          _tableName,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<List<_i3.AccountabilityEntry>> getEntries() => (super.noSuchMethod(
        Invocation.method(
          #getEntries,
          [],
        ),
        returnValue: _i7.Future<List<_i3.AccountabilityEntry>>.value(
            <_i3.AccountabilityEntry>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i3.AccountabilityEntry>>.value(
                <_i3.AccountabilityEntry>[]),
      ) as _i7.Future<List<_i3.AccountabilityEntry>>);

  @override
  _i7.Future<_i3.AccountabilityEntry> getById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i7.Future<_i3.AccountabilityEntry>.value(
            _FakeAccountabilityEntry_1(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i3.AccountabilityEntry>.value(
            _FakeAccountabilityEntry_1(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
      ) as _i7.Future<_i3.AccountabilityEntry>);

  @override
  _i7.Future<_i3.AccountabilityEntry> add(
          _i8.AccountabilityEntryRequest? req) =>
      (super.noSuchMethod(
        Invocation.method(
          #add,
          [req],
        ),
        returnValue: _i7.Future<_i3.AccountabilityEntry>.value(
            _FakeAccountabilityEntry_1(
          this,
          Invocation.method(
            #add,
            [req],
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i3.AccountabilityEntry>.value(
            _FakeAccountabilityEntry_1(
          this,
          Invocation.method(
            #add,
            [req],
          ),
        )),
      ) as _i7.Future<_i3.AccountabilityEntry>);

  @override
  _i7.Future<String?> addOrGetIdentification(
          _i4.AccountabilityIdentification? identification) =>
      (super.noSuchMethod(
        Invocation.method(
          #addOrGetIdentification,
          [identification],
        ),
        returnValue: _i7.Future<String?>.value(),
        returnValueForMissingStub: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);

  @override
  _i7.Future<void> delete(_i3.AccountabilityEntry? entry) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [entry],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i3.AccountabilityEntry> update(_i3.AccountabilityEntry? entry) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [entry],
        ),
        returnValue: _i7.Future<_i3.AccountabilityEntry>.value(
            _FakeAccountabilityEntry_1(
          this,
          Invocation.method(
            #update,
            [entry],
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i3.AccountabilityEntry>.value(
            _FakeAccountabilityEntry_1(
          this,
          Invocation.method(
            #update,
            [entry],
          ),
        )),
      ) as _i7.Future<_i3.AccountabilityEntry>);

  @override
  _i7.Future<List<_i4.AccountabilityIdentification>> getIdentifications() =>
      (super.noSuchMethod(
        Invocation.method(
          #getIdentifications,
          [],
        ),
        returnValue: _i7.Future<List<_i4.AccountabilityIdentification>>.value(
            <_i4.AccountabilityIdentification>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i4.AccountabilityIdentification>>.value(
                <_i4.AccountabilityIdentification>[]),
      ) as _i7.Future<List<_i4.AccountabilityIdentification>>);

  @override
  _i7.Future<_i4.AccountabilityIdentification?> getIdentification(
          String? identificationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getIdentification,
          [identificationId],
        ),
        returnValue: _i7.Future<_i4.AccountabilityIdentification?>.value(),
        returnValueForMissingStub:
            _i7.Future<_i4.AccountabilityIdentification?>.value(),
      ) as _i7.Future<_i4.AccountabilityIdentification?>);

  @override
  _i7.Future<_i4.AccountabilityIdentification> addIdentification(
          _i4.AccountabilityIdentification? identification) =>
      (super.noSuchMethod(
        Invocation.method(
          #addIdentification,
          [identification],
        ),
        returnValue: _i7.Future<_i4.AccountabilityIdentification>.value(
            _FakeAccountabilityIdentification_2(
          this,
          Invocation.method(
            #addIdentification,
            [identification],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i4.AccountabilityIdentification>.value(
                _FakeAccountabilityIdentification_2(
          this,
          Invocation.method(
            #addIdentification,
            [identification],
          ),
        )),
      ) as _i7.Future<_i4.AccountabilityIdentification>);

  @override
  _i7.Future<void> updateIdentification(
          _i4.AccountabilityIdentification? updatedIdentification) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateIdentification,
          [updatedIdentification],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteIdentification(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteIdentification,
          [id],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}
